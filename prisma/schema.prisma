// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Letter {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  andereLizenzpartner String?
  nameTraeger       String?
  vorstandTraeger   String?
  strasseTraeger    String?
  plzTraeger        Int?
  ortTraeger        String?
  bundeslandTraeger String?
  vereinTraeger     String?
  organisationProjekt     String?
  ansprechpartnerProjekt  String?
  telefonnummerProjekt    String?
  mobilProjekt            String?
  emailProjekt            String?
  wwwProjekt              String?
  ibanProjekt             String?
  kontoNameProjekt        String?
  eigenmittel             Float?
  oeffentlicheZuwendungen Float?
  privateSpenden          Float?
  bisherigeFoerderung     Float?
  zuwendungAndere         Float?
  checkBeitrag            Boolean?
  checkVeroeffentlich     Boolean?
  checkScheck             Boolean?
  checkDatenschutzBilder  Boolean?
  checkPersonenbezogen    Boolean?
  checkDatenschutzerklaerung    Boolean?
  checkTeilnahmebedingungen     Boolean?
  checkWahrheit                 Boolean?
  botschafter                   Botschafter? @relation(fields: [botschafterId], references: [id])
  botschafterId                 Int?
  kampagne                      Kampagne? @relation(fields: [kampagneId], references: [id])
  kampagneId                    Int?
  status                        String? @default("offen")
  verifyId                      String?  @default(cuid()) @unique
  verified                      Boolean? @default(false)
  notes                         Note[]
  files                         File[]
}

model Note {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  title             String?
  content           String?
  letter            Letter? @relation(fields: [letterId], references: [id])
  letterId          Int?
}


model File {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  title             String?
  note              String?
  file              String
  letter            Letter? @relation(fields: [letterId], references: [id])
  letterId          Int?
}


model Botschafter {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  name              String?
  strasse           String?
  plz               Int?
  ort               String?
  bundesland        String?
  letters           Letter[]
}

model Kampagne {
  id                Int       @id @default(autoincrement())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt @map(name: "updated_at")
  name              String?
  abgeschlossen     Boolean?   @default(false)
  letters           Letter[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model User {
  id            String       @default(cuid()) @id
  name          String?
  email         String?     @unique
  password      String?
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
